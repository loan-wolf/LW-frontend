/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface HardcodedCreditScoresInterface extends ethers.utils.Interface {
  functions: {
    "LTV(uint16)": FunctionFragment;
    "fulfill(bytes32,uint16)": FunctionFragment;
    "getCurrentScore(uint256)": FunctionFragment;
    "getLatestScore(uint256,uint256,bytes32,bytes)": FunctionFragment;
    "setInvestor(address)": FunctionFragment;
    "setLTV(uint8,uint256)": FunctionFragment;
    "testFulfill(uint256,bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LTV", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestScore",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setInvestor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLTV",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testFulfill",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "LTV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testFulfill",
    data: BytesLike
  ): Result;

  events: {};
}

export class HardcodedCreditScores extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HardcodedCreditScoresInterface;

  functions: {
    LTV(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    fulfill(
      _requestId: BytesLike,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentScore(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getLatestScore(
      tokenId: BigNumberish,
      loanID: BigNumberish,
      hash: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInvestor(
      _investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLTV(
      _score: BigNumberish,
      _ltv: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFulfill(
      loanID: BigNumberish,
      hash: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LTV(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  fulfill(
    _requestId: BytesLike,
    _score: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentScore(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getLatestScore(
    tokenId: BigNumberish,
    loanID: BigNumberish,
    hash: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInvestor(
    _investor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLTV(
    _score: BigNumberish,
    _ltv: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFulfill(
    loanID: BigNumberish,
    hash: BytesLike,
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LTV(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fulfill(
      _requestId: BytesLike,
      _score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentScore(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getLatestScore(
      tokenId: BigNumberish,
      loanID: BigNumberish,
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    setInvestor(_investor: string, overrides?: CallOverrides): Promise<void>;

    setLTV(
      _score: BigNumberish,
      _ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testFulfill(
      loanID: BigNumberish,
      hash: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    LTV(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fulfill(
      _requestId: BytesLike,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentScore(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestScore(
      tokenId: BigNumberish,
      loanID: BigNumberish,
      hash: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInvestor(
      _investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLTV(
      _score: BigNumberish,
      _ltv: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFulfill(
      loanID: BigNumberish,
      hash: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LTV(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfill(
      _requestId: BytesLike,
      _score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentScore(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestScore(
      tokenId: BigNumberish,
      loanID: BigNumberish,
      hash: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInvestor(
      _investor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLTV(
      _score: BigNumberish,
      _ltv: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFulfill(
      loanID: BigNumberish,
      hash: BytesLike,
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
