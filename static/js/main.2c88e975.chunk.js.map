{"version":3,"sources":["shared/ui/common/Text/Text.module.scss","shared/ui/layout/Header/Header.module.scss","shared/ui/common/Button/Button.module.scss","modules/modal/ui/Modal/Modal.module.scss","modules/wallet/ui/WalletModal/WalletModal.module.scss","modules/wallet/ui/ConnectButton/ConnectButton.module.scss","modules/blockChain/ui/AddressBadge/AddressBadge.module.scss","shared/ui/layout/ContentBox/ContentBox.module.scss","modules/wallet/ui/ConnectWalletModal/ConnectWalletModal.module.scss","shared/ui/layout/HeaderWallet/HeaderWallet.module.scss","modules/blockChain/chains.ts","config.ts","modules/wallet/hooks/useWalletConnectorStorage.ts","shared/hooks/useLocalStorage.ts","shared/utils/isClientSide.ts","modules/wallet/providers/walletConnectorsProvider.tsx","modules/blockChain/utils/getRpcUrls.ts","modules/wallet/hooks/useWalletConnectors.ts","modules/blockChain/hooks/useCurrentChain.ts","shared/ui/layout/ContentBox/ContentBox.tsx","pages/PageMain/PageMain.tsx","shared/ui/common/Text/Text.tsx","modules/wallet/hooks/useWalletInfo.ts","modules/modal/providers/ModalProvider.tsx","modules/modal/hooks/useModal.ts","shared/utils/openWindow.ts","modules/blockChain/utils/getEtherscanLink.ts","modules/blockChain/hooks/useEtherscanOpener.ts","modules/toasts/config.ts","shared/hooks/useCopyToClipboard.ts","modules/toasts/toastError.tsx","modules/toasts/toastInfo.tsx","shared/ui/common/Button/Button.tsx","modules/modal/ui/Modal/Modal.tsx","modules/wallet/ui/WalletModal/useWalletModal.ts","modules/wallet/ui/WalletModal/WalletModal.tsx","modules/wallet/hooks/useWalletDisconnect.ts","modules/wallet/hooks/useWalletConnect.ts","modules/wallet/ui/ConnectButton/ConnectButton.tsx","assets/metamask.svg","modules/wallet/ui/ConnectButton/ConnectMetamaskButton.tsx","assets/walletconnect.svg","modules/wallet/ui/ConnectButton/ConnectWalletConnectButton.tsx","modules/wallet/ui/ConnectWalletModal/useConnectWalletModal.ts","modules/wallet/ui/ConnectWalletModal/ConnectWalletModal.tsx","modules/blockChain/ui/AddressBadge/AddressBadge.tsx","modules/blockChain/utils/trimAddress.ts","shared/ui/layout/HeaderWallet/HeaderWallet.tsx","shared/ui/layout/Header/Header.tsx","shared/ui/layout/PageLayout/PageLayout.tsx","modules/blockChain/providers/web3Provider.tsx","modules/themes/constants.ts","modules/themes/themeColors.ts","modules/themes/loadTheme.ts","modules/themes/ThemeProvider.tsx","modules/appRoot/AppRoot/AppRoot.tsx","modules/wallet/hooks/useWalletAutoConnect.ts","index.tsx"],"names":["module","exports","Chains","Mainnet","Ropsten","Rinkeby","Goerli","Kovan","ChainNames","parseChainId","chainId","parsed","Number","hasOwnProperty","Error","getChainName","ChainColors","DEFAULT_CHAIN","process","SUPPORTED_CHAINS","split","map","LS_PREFIX","LS_KEY_CONNECTOR","useWalletConnectorStorage","key","initialValue","readValue","useCallback","window","item","localStorage","getItem","JSON","parse","error","console","warn","useState","storedValue","setStoredValue","saveToStorage","newValue","setItem","stringify","dispatchEvent","Event","setValue","value","Function","current","useEffect","handleStorageChange","addEventListener","removeEventListener","useLocalStorage","isClientSide","walletConnectorsContext","createContext","WalletConnectorsProvider","children","useRef","isInited","connectors","metamask","InjectedConnector","walletconnect","WalletConnectConnector","rpc","Object","values","reduce","acc","getRpcUrl","Provider","useWalletConnectors","useContext","useCurrentChain","useWeb3React","useMemo","ContentBox","className","s","contentBox","PageMain","Text","size","weight","truncateLines","isCentered","isTruncateOne","isTruncateMany","style","fontSize","fontWeight","WebkitLineClamp","cns","text","truncateOne","useWalletInfo","web3","isWalletConnected","active","walletAddress","account","modalContext","ModalProviderRaw","stateRef","update","useUpdate","openModal","modal","closeModal","context","onClose","ModalProvider","memo","getUseModal","useModal","openWindow","url","open","ETHERSCAN_SUBDOMAINS_BY_NETWORK","useEtherscanOpener","hash","entity","currentChain","link","getEtherscanLink","TOASTS_DEFAULT_OPTIONS","position","toast","POSITION","BOTTOM_LEFT","closeButton","hideProgressBar","pauseOnHover","pauseOnFocusLoss","closeOnClick","autoClose","delay","TOASTS_ERROR_OPTIONS","TOASTS_INFO_OPTIONS","useCopyToClipboard","options","bind","toastId","copy","toastInfo","Button","type","onClick","isFullWidth","button","Modal","width","useLockBodyScroll","wrap","overlay","body","maxWidth","undefined","useWalletModal","props","address","connector","disconnect","deactivate","close","WalletLinkConnector","useWalletDisconnect","handleDisconnect","handleCopy","handleEtherscan","title","actions","useWalletConnect","activate","ConnectButton","iconSrc","connectButton","connectButtonInner","src","alt","ConnectMetamaskButton","onConnect","rest","connect","openInWallet","encodeURIComponent","location","host","handleConnect","a","iconUrl","ConnectWalletConnectButton","useConnectWalletModal","common","AddressBadge","symbols","trimmedAddress","length","left","slice","right","trimAddress","addressBadge","isClickable","Boolean","HeaderWallet","openWalletModal","openConnectWalletModal","badge","Header","header","network","networkBulb","backgroundColor","PageLayout","getLibrary","provider","library","Web3Provider","pollingInterval","ThemesEnum","Web3AppProvider","THEME_DEFAULT","LIGHT","shared","colorWhite","durFast","durNorm","themedIndexes","DARK","themedSets","colorTextDefault","colorTextContrast","colorBgDeep","colorBgTop","colorBorder","colorBorderHover","colorControlDefault","colorControlDefaultHover","colorControlDefaultActive","colorUserSelect","getThemeColors","theme","themeIndex","findIndex","isEqual","themed","mapValues","get","LS_KEY_THEME","setLSTheme","getLSTheme","loadThemeColors","themeToSet","flow","toPairs","forEach","color","document","documentElement","setProperty","root","themeClass","RegExp","replace","removeRootClass","classList","add","toLowerCase","addRootClass","ThemeContext","React","colors","currentTheme","setTheme","noop","ThemeProvider","setThemeValue","App","currentConnector","connectorName","setConnector","entries","find","name","mounted","savedConnector","useWalletAutoConnect","isChainSupported","includes","AppMemoized","AppRoot","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2c88e975.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Text_text__35lHr\",\"truncateOne\":\"Text_truncateOne__MOSnx\",\"truncateMany\":\"Text_truncateMany__2SA2o\",\"isCentered\":\"Text_isCentered__17Wy9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2oxwv\",\"network\":\"Header_network__t8ZG2\",\"networkBulb\":\"Header_networkBulb__K4s5A\",\"actions\":\"Header_actions__1PHpM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2VBXL\",\"isFullWidth\":\"Button_isFullWidth__2WN0Q\",\"size--sm\":\"Button_size--sm__23ijp\",\"size--md\":\"Button_size--md__Y7mtH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Modal_wrap__camXS\",\"overlay\":\"Modal_overlay__21Etn\",\"body\":\"Modal_body__1b8JV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"WalletModal_title__32wHi\",\"address\":\"WalletModal_address__2tJ7-\",\"actions\":\"WalletModal_actions__2cRK0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"connectButton\":\"ConnectButton_connectButton__2sYyw\",\"connectButtonInner\":\"ConnectButton_connectButtonInner__wKPka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addressBadge\":\"AddressBadge_addressBadge__2geiO\",\"isClickable\":\"AddressBadge_isClickable__1Z8wY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentBox\":\"ContentBox_contentBox__1zWBj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ConnectWalletModal_title__16UPy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"HeaderWallet_badge__36dIj\"};","export const Chains = {\n  Mainnet: 1,\n  Ropsten: 3,\n  Rinkeby: 4,\n  Goerli: 5,\n  Kovan: 42,\n} as const\n// intentionally\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type Chains = typeof Chains[keyof typeof Chains]\n\nexport const ChainNames = {\n  [Chains.Mainnet]: 'Mainnet',\n  [Chains.Ropsten]: 'Ropsten',\n  [Chains.Rinkeby]: 'Rinkeby',\n  [Chains.Goerli]: 'Goerli',\n  [Chains.Kovan]: 'Kovan',\n} as const\n\nexport const parseChainId = (chainId: number | string) => {\n  const parsed = Number(chainId)\n  if (!ChainNames.hasOwnProperty(chainId)) {\n    throw new Error(`Chain ${chainId} is not supported`)\n  }\n  return parsed as Chains\n}\n\nexport const getChainName = (chainId: number) =>\n  ChainNames[parseChainId(chainId)]\n\nexport const ChainColors = {\n  [Chains.Mainnet]: '#29b6af',\n  [Chains.Ropsten]: '#ff4a8d',\n  [Chains.Rinkeby]: '#f6c343',\n  [Chains.Goerli]: '#3099f2',\n  [Chains.Kovan]: '#9064ff',\n} as const\n\nexport const getChainColor = (chainId: number) =>\n  ChainColors[parseChainId(chainId)]\n","import { Chains, parseChainId } from 'modules/blockChain/chains'\n\nexport const API_PATH = process.env.REACT_APP_API_PATH\n\nexport const DEFAULT_CHAIN: Chains = parseChainId(\n  process.env.REACT_APP_DEFAULT_CHAIN || '',\n)\n\nexport const SUPPORTED_CHAINS: Chains[] = (\n  process.env.REACT_APP_SUPPORTED_CHAINS || ''\n)\n  .split(',')\n  .map(parseChainId)\n\nexport const INFURA_API_KEY = process.env.REACT_APP_INFURA_API_KEY\nexport const ALCHEMY_API_KEY = process.env.REACT_APP_ALCHEMY_API_KEY\n\nexport const LS_PREFIX = 'loan-wolf'\n","import { useLocalStorage } from 'shared/hooks/useLocalStorage'\nimport { LS_PREFIX } from 'config'\nimport type { WalletConnectorsValue } from '../providers/walletConnectorsProvider'\n\nconst LS_KEY_CONNECTOR = `${LS_PREFIX}-connector`\n\ntype Connector = keyof WalletConnectorsValue\n\nexport function useWalletConnectorStorage() {\n  return useLocalStorage<Connector | null>(LS_KEY_CONNECTOR, null)\n}\n","import {\n  useCallback,\n  useEffect,\n  useState,\n  Dispatch,\n  SetStateAction,\n} from 'react'\n\nexport const useLocalStorage = <T>(\n  key: string,\n  initialValue: T,\n): [storedValue: T, setValue: Dispatch<SetStateAction<T>>] => {\n  const readValue = useCallback(() => {\n    if (typeof window === 'undefined') {\n      return initialValue\n    }\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? (JSON.parse(item) as T) : initialValue\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error)\n      return initialValue\n    }\n  }, [initialValue, key])\n\n  const [storedValue, setStoredValue] = useState(readValue)\n\n  const saveToStorage = useCallback(\n    newValue => {\n      if (typeof window === 'undefined') {\n        console.warn(\n          `Tried setting localStorage key “${key}” even though environment is not a client`,\n        )\n      }\n\n      try {\n        window.localStorage.setItem(key, JSON.stringify(newValue))\n        window.dispatchEvent(new Event('local-storage'))\n      } catch (error) {\n        console.warn(`Error setting localStorage key “${key}”:`, error)\n      }\n    },\n    [key],\n  )\n\n  const setValue = useCallback(\n    value => {\n      if (value instanceof Function) {\n        setStoredValue(current => {\n          const newValue = value(current)\n          saveToStorage(newValue)\n          return newValue\n        })\n      } else {\n        saveToStorage(value)\n        setStoredValue(value)\n      }\n    },\n    [saveToStorage],\n  )\n\n  useEffect(() => {\n    setStoredValue(readValue())\n  }, [readValue])\n\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setStoredValue(readValue())\n    }\n    window.addEventListener('storage', handleStorageChange)\n    window.addEventListener('local-storage', handleStorageChange)\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange)\n      window.removeEventListener('local-storage', handleStorageChange)\n    }\n  }, [readValue])\n\n  return [storedValue, setValue]\n}\n","export function isClientSide() {\n  return typeof window !== 'undefined'\n}\n","import { createContext, useRef } from 'react'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { Chains } from 'modules/blockChain/chains'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { getRpcUrl } from 'modules/blockChain/utils/getRpcUrls'\nimport { isClientSide } from 'shared/utils/isClientSide'\n\nexport type WalletConnectorsValue = {\n  metamask: InjectedConnector\n  walletconnect: WalletConnectConnector | null\n}\n\nexport const walletConnectorsContext = createContext(\n  {} as WalletConnectorsValue,\n)\n\ntype Props = {\n  children?: React.ReactNode\n}\n\nexport function WalletConnectorsProvider({ children }: Props) {\n  const { current } = useRef({\n    isInited: false,\n    connectors: {} as WalletConnectorsValue,\n  })\n\n  if (!current.isInited && isClientSide()) {\n    current.connectors.metamask = new InjectedConnector({})\n\n    current.connectors.walletconnect = new WalletConnectConnector({\n      rpc: Object.values(Chains).reduce(\n        (acc, chainId) => ({\n          ...acc,\n          [chainId]: getRpcUrl(chainId),\n        }),\n        {},\n      ),\n    })\n\n    current.isInited = true\n  }\n\n  return (\n    <walletConnectorsContext.Provider\n      value={current.connectors}\n      children={children}\n    />\n  )\n}\n","import { Chains, getChainName, parseChainId } from '../chains'\nimport { INFURA_API_KEY, ALCHEMY_API_KEY, API_PATH } from 'config'\n\nconst getName = (chainId: Chains) => getChainName(chainId).toLocaleLowerCase()\n\nexport const getInfuraRpcUrl = (chainId: Chains) =>\n  `https://${getName(chainId)}.infura.io/v3/${INFURA_API_KEY}`\n\nexport const getAlchemyRpcUrl = (chainId: Chains) =>\n  `https://eth-${getName(chainId)}.alchemyapi.io/v2/${ALCHEMY_API_KEY}`\n\nexport const getRpcJsonUrls = (chainId: Chains): string[] => {\n  const urls = []\n\n  if (INFURA_API_KEY) urls.push(getInfuraRpcUrl(chainId))\n  if (ALCHEMY_API_KEY) urls.push(getAlchemyRpcUrl(chainId))\n\n  if (!urls.length) {\n    throw new Error(\n      'There are no API keys in env. Please, check your configuration',\n    )\n  }\n\n  return urls\n}\n\nexport const getRpcUrl = (chainId: Chains) =>\n  `${API_PATH ?? ''}/api/rpc?chainId=${parseChainId(chainId)}`\n","import { useContext } from 'react'\nimport { walletConnectorsContext } from '../providers/walletConnectorsProvider'\n\nexport function useWalletConnectors() {\n  return useContext(walletConnectorsContext)\n}\n","import { useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { parseChainId } from '../chains'\nimport { DEFAULT_CHAIN } from 'config'\n\nexport const useCurrentChain = () => {\n  const { chainId = DEFAULT_CHAIN } = useWeb3React()\n  return useMemo(() => parseChainId(chainId), [chainId])\n}\n","import s from './ContentBox.module.scss'\n\ntype Props = {\n  children: React.ReactNode\n}\n\nexport function ContentBox({ children }: Props) {\n  return <div className={s.contentBox}>{children}</div>\n}\n","import { ContentBox } from 'shared/ui/layout/ContentBox'\n\nexport function PageMain() {\n  return <ContentBox>Main page</ContentBox>\n}\n","import cns from 'classnames'\nimport s from './Text.module.scss'\n\nexport type TextSize = 12 | 14 | 16 | 18\nexport type TextWeight = 300 | 500 | 800\n\ntype Props = {\n  size: TextSize\n  weight?: TextWeight\n  truncateLines?: number\n  isCentered?: boolean\n  children: React.ReactNode\n  className?: string\n}\n\nexport function Text({\n  size,\n  weight = 500,\n  truncateLines,\n  isCentered,\n  children,\n  className,\n}: Props) {\n  const isTruncateOne = truncateLines && truncateLines === 1\n  const isTruncateMany = truncateLines && truncateLines > 1\n  return (\n    <div\n      style={{\n        fontSize: size,\n        fontWeight: weight,\n        ...(isTruncateMany ? { WebkitLineClamp: truncateLines } : {}),\n      }}\n      className={cns(s.text, className, {\n        [s.isCentered]: isCentered,\n        [s.truncateOne]: isTruncateOne,\n        [s.truncateOne]: isTruncateMany,\n      })}\n    >\n      {children}\n    </div>\n  )\n}\n","import { useWeb3React } from '@web3-react/core'\n\nexport function useWalletInfo() {\n  const web3 = useWeb3React()\n\n  return {\n    isWalletConnected: web3.active,\n    walletAddress: web3.account,\n  }\n}\n","import { memo, useMemo, useCallback, createContext, useRef } from 'react'\nimport { useUpdate } from 'react-use'\nimport type { ModalProps } from '../ui/Modal'\n\nexport type ModalComponentType = React.ComponentType<ModalProps>\n\ntype ModalContextValue = {\n  openModal: (modal: ModalComponentType) => void\n}\n\nexport const modalContext = createContext({} as ModalContextValue)\n\ntype Props = {\n  children?: React.ReactNode\n}\n\nfunction ModalProviderRaw({ children }: Props) {\n  const stateRef = useRef(null as ModalComponentType | null)\n  const update = useUpdate()\n\n  const openModal = useCallback(\n    (modal: ModalComponentType) => {\n      stateRef.current = modal\n      update()\n    },\n    [update],\n  )\n\n  const closeModal = useCallback(() => {\n    stateRef.current = null\n    update()\n  }, [update])\n\n  const context = useMemo(\n    () => ({\n      openModal,\n      closeModal,\n    }),\n    [openModal, closeModal],\n  )\n\n  return (\n    <modalContext.Provider value={context}>\n      {children}\n      {stateRef.current && <stateRef.current onClose={closeModal} />}\n    </modalContext.Provider>\n  )\n}\n\nexport const ModalProvider = memo(ModalProviderRaw)\n","import { useCallback, useContext } from 'react'\nimport { modalContext, ModalComponentType } from '../providers/ModalProvider'\n\nexport function useModal(modal: ModalComponentType) {\n  const { openModal } = useContext(modalContext)\n  return useCallback(() => openModal(modal), [openModal, modal])\n}\n\nexport function getUseModal(modal: ModalComponentType) {\n  return () => useModal(modal)\n}\n","export const openWindow = (url: string): void => {\n  if (typeof window === 'undefined') return\n\n  window.open(url, '_blank', 'noopener,noreferrer')\n}\n","import { Chains } from '../chains'\n\nconst ETHERSCAN_SUBDOMAINS_BY_NETWORK = {\n  [Chains.Mainnet]: '',\n  [Chains.Ropsten]: 'ropsten.',\n  [Chains.Rinkeby]: 'rinkeby.',\n  [Chains.Goerli]: 'goerli.',\n  [Chains.Kovan]: 'kovan.',\n} as const\n\nexport type EtherscanEntities = 'tx' | 'token' | 'address'\n\nexport const getEtherscanLink = (\n  chainId: Chains,\n  hash: string,\n  entity: EtherscanEntities = 'tx',\n) =>\n  `https://${ETHERSCAN_SUBDOMAINS_BY_NETWORK[chainId]}etherscan.io/${entity}/${hash}`\n","import { useCallback } from 'react'\nimport { useCurrentChain } from './useCurrentChain'\nimport { openWindow } from 'shared/utils/openWindow'\nimport { getEtherscanLink, EtherscanEntities } from '../utils/getEtherscanLink'\n\nexport function useEtherscanOpener(hash: string, entity: EtherscanEntities) {\n  const currentChain = useCurrentChain()\n  return useCallback(() => {\n    const link = getEtherscanLink(currentChain, hash, entity)\n    openWindow(link)\n  }, [currentChain, entity, hash])\n}\n","import { toast, ToastOptions } from 'react-toastify'\n\nexport const TOASTS_DEFAULT_OPTIONS: ToastOptions = {\n  position: toast.POSITION.BOTTOM_LEFT,\n  closeButton: false,\n  hideProgressBar: false,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: false,\n  autoClose: 6000,\n  delay: 0,\n}\n\nexport const TOASTS_ERROR_OPTIONS: ToastOptions = {\n  ...TOASTS_DEFAULT_OPTIONS,\n  closeOnClick: true,\n}\n\nexport const TOASTS_SUCCESS_OPTIONS: ToastOptions = {\n  ...TOASTS_DEFAULT_OPTIONS,\n}\n\nexport const TOASTS_INFO_OPTIONS: ToastOptions = {\n  ...TOASTS_DEFAULT_OPTIONS,\n  closeOnClick: true,\n}\n\nexport const TOASTS_PENDING_OPTIONS: ToastOptions = {\n  ...TOASTS_DEFAULT_OPTIONS,\n  autoClose: false,\n}\n","import { useCallback } from 'react'\nimport copy from 'copy-to-clipboard'\nimport { toastInfo } from 'modules/toasts'\n\nexport const useCopyToClipboard = (text: string): (() => void) => {\n  return useCallback(() => {\n    copy(text)\n    toastInfo('Copied to clipboard')\n  }, [text])\n}\n","import { toast } from 'react-toastify'\nimport { TOASTS_ERROR_OPTIONS } from './config'\nimport { Toast } from './types'\n\nexport const toastError: Toast = (text, options) => {\n  return toast.error(text, { ...TOASTS_ERROR_OPTIONS, ...options })\n}\n\nexport const toastEthereumError = toastError.bind(\n  null,\n  'Something went wrong while retrieving data from Ethereum',\n  { toastId: 'ethereum-network-error' },\n)\n","import { toast } from 'react-toastify'\nimport { TOASTS_INFO_OPTIONS } from './config'\nimport { Toast } from './types'\n\nexport const toastInfo: Toast = (text, options) => {\n  return toast(text, { ...TOASTS_INFO_OPTIONS, ...options })\n}\n","import cns from 'classnames'\nimport s from './Button.module.scss'\n\ntype Props = {\n  size?: 'sm' | 'md'\n  type?: 'button' | 'submit'\n  isFullWidth?: boolean\n  onClick?: React.MouseEventHandler\n  children: React.ReactNode\n  className?: string\n}\n\nexport function Button({\n  size = 'md',\n  type = 'button',\n  onClick,\n  isFullWidth,\n  children,\n  className,\n}: Props) {\n  return (\n    <button\n      type={type}\n      onClick={onClick}\n      className={cns(s.button, className, s[`size--${size}`], {\n        [s.isFullWidth]: isFullWidth,\n      })}\n      children={children}\n    />\n  )\n}\n","import { useLockBodyScroll } from 'react-use'\nimport s from './Modal.module.scss'\n\nexport type ModalProps = {\n  onClose: () => void\n}\n\ntype Props = ModalProps & {\n  width?: number\n  children?: React.ReactNode\n}\n\nexport function Modal({ width, children, onClose }: Props) {\n  useLockBodyScroll()\n  return (\n    <div className={s.wrap}>\n      <div className={s.overlay} onClick={onClose} />\n      <div\n        className={s.body}\n        style={width ? { maxWidth: width, width: '100%' } : undefined}\n        children={children}\n      />\n    </div>\n  )\n}\n","import { getUseModal } from 'modules/modal/hooks/useModal'\nimport { WalletModal } from './WalletModal'\n\nexport const useWalletModal = getUseModal(WalletModal)\n","import { useCallback } from 'react'\nimport { useEtherscanOpener } from 'modules/blockChain/hooks/useEtherscanOpener'\nimport { useWalletInfo } from 'modules/wallet/hooks/useWalletInfo'\nimport { useWalletDisconnect } from 'modules/wallet/hooks/useWalletDisconnect'\nimport { useWalletConnectorStorage } from 'modules/wallet/hooks/useWalletConnectorStorage'\nimport { useCopyToClipboard } from 'shared/hooks/useCopyToClipboard'\n\nimport { Text } from 'shared/ui/common/Text'\nimport { Button } from 'shared/ui/common/Button'\nimport { Modal, ModalProps } from 'modules/modal/ui/Modal'\n\nimport s from './WalletModal.module.scss'\n\nexport function WalletModal(props: ModalProps) {\n  const { onClose } = props\n  const { walletAddress: address } = useWalletInfo()\n  const [connector] = useWalletConnectorStorage()\n  const disconnect = useWalletDisconnect()\n\n  const handleDisconnect = useCallback(() => {\n    disconnect()\n    onClose()\n  }, [disconnect, onClose])\n\n  const handleCopy = useCopyToClipboard(address ?? '')\n  const handleEtherscan = useEtherscanOpener(address ?? '', 'address')\n\n  return (\n    <Modal {...props} width={420}>\n      <Text size={14} className={s.title}>\n        Connected with {connector}\n      </Text>\n\n      <Text size={12} className={s.address}>\n        {address}\n      </Text>\n\n      <div className={s.actions}>\n        <Button size=\"sm\" onClick={handleCopy} children=\"Copy address\" />\n        <Button\n          size=\"sm\"\n          onClick={handleEtherscan}\n          children=\"View on Etherscan\"\n        />\n        <Button size=\"sm\" onClick={handleDisconnect}>\n          Disconnect\n        </Button>\n      </div>\n    </Modal>\n  )\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { useCallback } from 'react'\n\nexport function useWalletDisconnect() {\n  const { deactivate, connector } = useWeb3React()\n  return useCallback(() => {\n    deactivate()\n    connector?.deactivate()\n    if (connector instanceof WalletConnectConnector) connector.close()\n    if (connector instanceof WalletLinkConnector) connector.close()\n  }, [deactivate, connector])\n}\n","import { useWeb3React } from '@web3-react/core'\n\nexport function useWalletConnect() {\n  const { activate } = useWeb3React()\n  return activate\n}\n","import { Button } from 'shared/ui/common/Button'\nimport s from './ConnectButton.module.scss'\n\nexport type Props = {\n  iconSrc: string\n  children: React.ReactNode\n  onClick: React.MouseEventHandler\n}\n\nexport function ConnectButton(props: Props) {\n  const { iconSrc, onClick, children } = props\n\n  return (\n    <Button onClick={onClick} isFullWidth className={s.connectButton}>\n      <div className={s.connectButtonInner}>\n        <span>{children}</span>\n        <img src={iconSrc} alt=\"\" />\n      </div>\n    </Button>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/metamask.b312ebf6.svg\";","import { useCallback } from 'react'\nimport { useWalletConnect } from '../../hooks/useWalletConnect'\nimport { useWalletConnectors } from '../../hooks/useWalletConnectors'\nimport { ConnectButton } from './ConnectButton'\nimport { ConnectWalletButtonProps } from './types'\nimport iconUrl from 'assets/metamask.svg'\nimport { openWindow } from 'shared/utils/openWindow'\nimport { isClientSide } from 'shared/utils/isClientSide'\n\nexport function ConnectMetamaskButton(props: ConnectWalletButtonProps) {\n  const { onConnect, ...rest } = props\n  const connect = useWalletConnect()\n  const { metamask: connector } = useWalletConnectors()\n\n  const openInWallet = useCallback(() => {\n    const url = encodeURIComponent(window.location.host)\n    openWindow(`https://metamask.app.link/dapp/${url}`)\n  }, [])\n\n  const handleConnect = useCallback(async () => {\n    const hasInjected = isClientSide() && 'ethereum' in window\n\n    if (!hasInjected) {\n      openInWallet()\n      return\n    }\n\n    onConnect?.()\n    await connect(connector)\n  }, [onConnect, connect, connector, openInWallet])\n\n  return (\n    <ConnectButton\n      {...rest}\n      iconSrc={iconUrl}\n      onClick={handleConnect}\n      children=\"Metamask\"\n    />\n  )\n}\n","export default __webpack_public_path__ + \"static/media/walletconnect.0935a4bc.svg\";","import { useCallback } from 'react'\nimport { useWalletConnect } from '../../hooks/useWalletConnect'\nimport { useWalletConnectors } from '../../hooks/useWalletConnectors'\nimport { ConnectButton } from './ConnectButton'\nimport { ConnectWalletButtonProps } from './types'\nimport iconUrl from 'assets/walletconnect.svg'\n\nexport function ConnectWalletConnectButton(props: ConnectWalletButtonProps) {\n  const { onConnect, ...rest } = props\n  const connect = useWalletConnect()\n  const { walletconnect: connector } = useWalletConnectors()\n\n  const handleConnect = useCallback(async () => {\n    if (!connector) return\n\n    onConnect?.()\n    connector.deactivate()\n    await connector.close()\n    await connect(connector)\n  }, [connector, connect, onConnect])\n\n  return (\n    <ConnectButton\n      {...rest}\n      iconSrc={iconUrl}\n      onClick={handleConnect}\n      children=\"WalletConnect\"\n    />\n  )\n}\n","import { getUseModal } from 'modules/modal/hooks/useModal'\nimport { ConnectWalletModal } from './ConnectWalletModal'\n\nexport const useConnectWalletModal = getUseModal(ConnectWalletModal)\n","import { Text } from 'shared/ui/common/Text'\nimport { Modal, ModalProps } from 'modules/modal/ui/Modal'\nimport {\n  ConnectMetamaskButton,\n  ConnectWalletConnectButton,\n} from '../ConnectButton'\n\nimport s from './ConnectWalletModal.module.scss'\n\ntype Props = ModalProps & {}\n\nexport function ConnectWalletModal(props: Props) {\n  const { onClose } = props\n\n  const common = {\n    onConnect: onClose,\n  }\n\n  return (\n    <Modal {...props} width={360}>\n      <Text size={16} isCentered className={s.title}>\n        Connect with:\n      </Text>\n      <ConnectMetamaskButton {...common} />\n      <ConnectWalletConnectButton {...common} />\n    </Modal>\n  )\n}\n","import cns from 'classnames'\nimport { useMemo } from 'react'\nimport { trimAddress } from 'modules/blockChain/utils/trimAddress'\nimport s from './AddressBadge.module.scss'\n\ntype Props = {\n  symbols?: number\n  address: string\n  onClick: React.MouseEventHandler\n  className?: string\n}\n\nexport function AddressBadge({\n  symbols = 3,\n  address,\n  onClick,\n  className,\n}: Props) {\n  const trimmedAddress = useMemo(\n    () => trimAddress(address, symbols),\n    [address, symbols],\n  )\n  return (\n    <span\n      onClick={onClick}\n      className={cns(s.addressBadge, className, {\n        [s.isClickable]: Boolean(onClick),\n      })}\n    >\n      {trimmedAddress}\n    </span>\n  )\n}\n","export const trimAddress = (address: string, symbols: number): string => {\n  if (symbols <= 0) return ''\n  if (symbols * 2 >= address.length) return address\n\n  const left = address.slice(0, symbols)\n  const right = address.slice(-symbols)\n\n  return `${left}...${right}`\n}\n","import { useWalletInfo } from 'modules/wallet/hooks/useWalletInfo'\nimport { useWalletModal } from 'modules/wallet/ui/WalletModal'\nimport { useConnectWalletModal } from 'modules/wallet/ui/ConnectWalletModal'\n\nimport { Button } from 'shared/ui/common/Button'\nimport { AddressBadge } from 'modules/blockChain/ui/AddressBadge'\n\nimport s from './HeaderWallet.module.scss'\n\nexport function HeaderWallet() {\n  const { isWalletConnected, walletAddress } = useWalletInfo()\n  const openWalletModal = useWalletModal()\n  const openConnectWalletModal = useConnectWalletModal()\n\n  if (!isWalletConnected) {\n    return <Button onClick={openConnectWalletModal} children=\"Connect\" />\n  }\n\n  return (\n    <AddressBadge\n      symbols={4}\n      address={walletAddress!}\n      onClick={openWalletModal}\n      className={s.badge}\n    />\n  )\n}\n","import { useCurrentChain } from 'modules/blockChain/hooks/useCurrentChain'\n\nimport { Text } from 'shared/ui/common/Text'\nimport { ContentBox } from '../ContentBox'\nimport { HeaderWallet } from '../HeaderWallet'\n\nimport s from './Header.module.scss'\nimport { getChainColor, getChainName } from 'modules/blockChain/chains'\n\nexport function Header() {\n  const currentChain = useCurrentChain()\n  return (\n    <ContentBox>\n      <header className={s.header}>\n        <div>Loan Wolf</div>\n        <div className={s.actions}>\n          <div className={s.network}>\n            <div\n              className={s.networkBulb}\n              style={{ backgroundColor: getChainColor(currentChain) }}\n            />\n            <Text size={14} weight={500}>\n              {getChainName(currentChain)}\n            </Text>\n          </div>\n          <HeaderWallet />\n        </div>\n      </header>\n    </ContentBox>\n  )\n}\n","import { Header } from '../Header'\n\ntype Props = {\n  children: React.ReactNode\n}\n\nexport function PageLayout({ children }: Props) {\n  return (\n    <>\n      <Header />\n      {children}\n    </>\n  )\n}\n","import { Web3Provider } from '@ethersproject/providers'\nimport { Web3ReactProvider } from '@web3-react/core'\n\nconst POLLING_INTERVAL = 12000\n\nfunction getLibrary(provider: ConstructorParameters<typeof Web3Provider>[0]) {\n  const library = new Web3Provider(provider)\n  library.pollingInterval = POLLING_INTERVAL\n  return library\n}\n\ntype Props = {\n  children?: React.ReactNode\n}\n\nexport const Web3AppProvider = ({ children }: Props) => (\n  <Web3ReactProvider getLibrary={getLibrary} children={children} />\n)\n","export enum ThemesEnum {\n  DARK = 'DARK',\n  LIGHT = 'LIGHT',\n}\n\nexport const THEME_DEFAULT = ThemesEnum.LIGHT\n","import { isEqual, findIndex, mapValues, get } from 'lodash/fp'\nimport { ThemesEnum } from './constants'\n\nconst shared = {\n  colorWhite: '#ffffff',\n\n  durFast: '100ms',\n  durNorm: '300ms',\n}\n\nconst themedIndexes = [ThemesEnum.DARK, ThemesEnum.LIGHT]\n\nconst themedSets = {\n  // Text\n  colorTextDefault: ['#ffffff', '#000626'],\n  colorTextContrast: ['#000626', '#ffffff'],\n\n  // Background\n  colorBgDeep: ['#070315', '#F9FAFE'],\n  colorBgTop: ['#141321', '#FFFFFF'],\n\n  // Borders\n  colorBorder: ['#424166', '#B4B5D8'],\n  colorBorderHover: ['#424166', '#B4B5D8'],\n\n  // Controls\n  colorControlDefault: ['#fff', '#c8e8df'],\n  colorControlDefaultHover: ['#fff', '#6cefa0'],\n  colorControlDefaultActive: ['#fff', '#5aca86'],\n\n  // Misc\n  colorUserSelect: ['#fff', '#dadaff'],\n}\n\nexport function getThemeColors(theme: ThemesEnum) {\n  const themeIndex = findIndex(isEqual(theme), themedIndexes)\n\n  const themed = mapValues(get(themeIndex), themedSets) as {\n    [key in keyof typeof themedSets]: string\n  }\n\n  return {\n    ...shared,\n    ...themed,\n  }\n}\n","import { flow, forEach, toPairs } from 'lodash/fp'\nimport { isClientSide } from 'shared/utils/isClientSide'\nimport { ThemesEnum, THEME_DEFAULT } from './constants'\nimport { getThemeColors } from './themeColors'\nimport { LS_PREFIX } from 'config'\n\nconst LS_KEY_THEME = `${LS_PREFIX}_THEME`\n\nexport function setLSTheme(theme: ThemesEnum) {\n  if (!isClientSide()) {\n    return\n  }\n\n  return localStorage.setItem(LS_KEY_THEME, theme)\n}\n\nexport function getLSTheme() {\n  // TODO: Change LS to cookies in case of full server-render\n  if (!isClientSide()) {\n    return THEME_DEFAULT\n  }\n\n  let theme: string | null = localStorage.getItem(LS_KEY_THEME)\n\n  if (!theme || !ThemesEnum.hasOwnProperty(theme)) {\n    theme = THEME_DEFAULT\n    setLSTheme(theme as ThemesEnum)\n  }\n\n  return theme as ThemesEnum\n}\n\nfunction addRootClass(theme: ThemesEnum) {\n  document.documentElement.classList.add(`theme-${theme.toLowerCase()}`)\n}\n\nfunction removeRootClass() {\n  const root = document.documentElement\n  const themeClass = new RegExp(/theme-[^\\s]+/)\n\n  root.className = root.className.replace(themeClass, '')\n}\n\nexport function loadThemeColors(theme: ThemesEnum) {\n  const themeToSet = ThemesEnum.hasOwnProperty(theme) ? theme : THEME_DEFAULT\n\n  flow(\n    getThemeColors,\n    toPairs,\n    forEach(([key, color]: [string, string]) => {\n      document.documentElement.style.setProperty(`--${key}`, color)\n    }),\n  )(themeToSet)\n\n  removeRootClass()\n  addRootClass(themeToSet)\n}\n","import React, { useState, useMemo, useCallback } from 'react'\nimport { noop } from 'lodash/fp'\nimport { ThemesEnum, THEME_DEFAULT } from 'modules/themes/constants'\nimport { getThemeColors } from 'modules/themes/themeColors'\nimport {\n  getLSTheme,\n  setLSTheme,\n  loadThemeColors,\n} from 'modules/themes/loadTheme'\n\ntype ThemeContextValue = {\n  colors: ReturnType<typeof getThemeColors>\n  currentTheme: ThemesEnum\n  setTheme: (theme: ThemesEnum) => void\n}\n\nexport const ThemeContext = React.createContext<ThemeContextValue>({\n  colors: getThemeColors(THEME_DEFAULT),\n  currentTheme: THEME_DEFAULT,\n  setTheme: noop,\n})\n\ntype Props = {\n  children?: React.ReactNode\n}\n\nexport function ThemeProvider({ children }: Props) {\n  const [currentTheme, setThemeValue] = useState<ThemesEnum>(\n    useMemo(() => getLSTheme(), []),\n  )\n\n  const setTheme = useCallback((theme: ThemesEnum) => {\n    loadThemeColors(theme)\n    setLSTheme(theme)\n    setThemeValue(theme)\n  }, [])\n\n  const colors = useMemo(() => getThemeColors(currentTheme), [currentTheme])\n\n  return (\n    <ThemeContext.Provider value={{ colors, currentTheme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n","import { StrictMode, useMemo, memo } from 'react'\nimport { useWalletAutoConnect } from 'modules/wallet/hooks/useWalletAutoConnect'\nimport { useCurrentChain } from 'modules/blockChain/hooks/useCurrentChain'\n\nimport { PageMain } from 'pages/PageMain'\nimport { ContentBox } from 'shared/ui/layout/ContentBox'\nimport { PageLayout } from 'shared/ui/layout/PageLayout'\nimport { Web3AppProvider } from 'modules/blockChain/providers/web3Provider'\nimport { WalletConnectorsProvider } from 'modules/wallet/providers/walletConnectorsProvider'\nimport { ThemeProvider } from 'modules/themes/ThemeProvider'\nimport { ModalProvider } from 'modules/modal/providers/ModalProvider'\nimport 'modules/appRoot/global-styles.scss'\n\nimport { SUPPORTED_CHAINS } from 'config'\n\nfunction App() {\n  useWalletAutoConnect()\n  const chainId = useCurrentChain()\n  const isChainSupported = useMemo(\n    () => SUPPORTED_CHAINS.includes(chainId),\n    [chainId],\n  )\n\n  return (\n    <PageLayout>\n      {isChainSupported ? (\n        <PageMain />\n      ) : (\n        <ContentBox>Chain not supported</ContentBox>\n      )}\n    </PageLayout>\n  )\n}\n\nconst AppMemoized = memo(App)\n\nexport function AppRoot() {\n  return (\n    <StrictMode>\n      <Web3AppProvider>\n        <WalletConnectorsProvider>\n          <ThemeProvider>\n            <ModalProvider>\n              <AppMemoized />\n            </ModalProvider>\n          </ThemeProvider>\n        </WalletConnectorsProvider>\n      </Web3AppProvider>\n    </StrictMode>\n  )\n}\n","import { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useWalletConnectorStorage } from './useWalletConnectorStorage'\nimport { useWalletConnectors } from './useWalletConnectors'\n\nexport function useWalletAutoConnect() {\n  const {\n    active,\n    connector: currentConnector,\n    activate: connect,\n  } = useWeb3React()\n  const connectors = useWalletConnectors()\n  const [connectorName, setConnector] = useWalletConnectorStorage()\n\n  useEffect(() => {\n    if (!active) {\n      setConnector(null)\n      return\n    }\n\n    const [name] =\n      Object.entries(connectors).find(\n        ([, connectorObj]) => connectorObj === currentConnector,\n      ) ?? []\n\n    if (name) {\n      setConnector(name as keyof typeof connectors)\n    }\n  }, [active, connectors, currentConnector, setConnector])\n\n  const mounted = useRef(false)\n\n  useEffect(() => {\n    if (mounted.current) return\n    mounted.current = true\n\n    const savedConnector = connectorName && connectors[connectorName]\n    if (!savedConnector || active) return\n    connect(savedConnector)\n  }, [connect, connectors, active, connectorName])\n}\n","import ReactDOM from 'react-dom'\nimport { AppRoot } from './modules/appRoot/AppRoot'\nimport { getLSTheme, loadThemeColors } from 'modules/themes/loadTheme'\n\nloadThemeColors(getLSTheme())\n\nReactDOM.render(<AppRoot />, document.getElementById('root'))\n"],"sourceRoot":""}